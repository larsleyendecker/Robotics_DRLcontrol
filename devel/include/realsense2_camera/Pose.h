// Generated by gencpp from file realsense2_camera/Pose.msg
// DO NOT EDIT!


#ifndef REALSENSE2_CAMERA_MESSAGE_POSE_H
#define REALSENSE2_CAMERA_MESSAGE_POSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace realsense2_camera
{
template <class ContainerAllocator>
struct Pose_
{
  typedef Pose_<ContainerAllocator> Type;

  Pose_()
    : tx(0.0)
    , ty(0.0)
    , tz(0.0)
    , rx(0.0)
    , ry(0.0)
    , rz(0.0)  {
    }
  Pose_(const ContainerAllocator& _alloc)
    : tx(0.0)
    , ty(0.0)
    , tz(0.0)
    , rx(0.0)
    , ry(0.0)
    , rz(0.0)  {
  (void)_alloc;
    }



   typedef double _tx_type;
  _tx_type tx;

   typedef double _ty_type;
  _ty_type ty;

   typedef double _tz_type;
  _tz_type tz;

   typedef double _rx_type;
  _rx_type rx;

   typedef double _ry_type;
  _ry_type ry;

   typedef double _rz_type;
  _rz_type rz;





  typedef boost::shared_ptr< ::realsense2_camera::Pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::realsense2_camera::Pose_<ContainerAllocator> const> ConstPtr;

}; // struct Pose_

typedef ::realsense2_camera::Pose_<std::allocator<void> > Pose;

typedef boost::shared_ptr< ::realsense2_camera::Pose > PosePtr;
typedef boost::shared_ptr< ::realsense2_camera::Pose const> PoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::realsense2_camera::Pose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::realsense2_camera::Pose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::realsense2_camera::Pose_<ContainerAllocator1> & lhs, const ::realsense2_camera::Pose_<ContainerAllocator2> & rhs)
{
  return lhs.tx == rhs.tx &&
    lhs.ty == rhs.ty &&
    lhs.tz == rhs.tz &&
    lhs.rx == rhs.rx &&
    lhs.ry == rhs.ry &&
    lhs.rz == rhs.rz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::realsense2_camera::Pose_<ContainerAllocator1> & lhs, const ::realsense2_camera::Pose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace realsense2_camera

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::realsense2_camera::Pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realsense2_camera::Pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense2_camera::Pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense2_camera::Pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense2_camera::Pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense2_camera::Pose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::realsense2_camera::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e46dd9c8f4990ebb7cf2458b8e07e095";
  }

  static const char* value(const ::realsense2_camera::Pose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe46dd9c8f4990ebbULL;
  static const uint64_t static_value2 = 0x7cf2458b8e07e095ULL;
};

template<class ContainerAllocator>
struct DataType< ::realsense2_camera::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "realsense2_camera/Pose";
  }

  static const char* value(const ::realsense2_camera::Pose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::realsense2_camera::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 tx\n"
"float64 ty\n"
"float64 tz\n"
"float64 rx\n"
"float64 ry\n"
"float64 rz \n"
"\n"
;
  }

  static const char* value(const ::realsense2_camera::Pose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::realsense2_camera::Pose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tx);
      stream.next(m.ty);
      stream.next(m.tz);
      stream.next(m.rx);
      stream.next(m.ry);
      stream.next(m.rz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Pose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::realsense2_camera::Pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::realsense2_camera::Pose_<ContainerAllocator>& v)
  {
    s << indent << "tx: ";
    Printer<double>::stream(s, indent + "  ", v.tx);
    s << indent << "ty: ";
    Printer<double>::stream(s, indent + "  ", v.ty);
    s << indent << "tz: ";
    Printer<double>::stream(s, indent + "  ", v.tz);
    s << indent << "rx: ";
    Printer<double>::stream(s, indent + "  ", v.rx);
    s << indent << "ry: ";
    Printer<double>::stream(s, indent + "  ", v.ry);
    s << indent << "rz: ";
    Printer<double>::stream(s, indent + "  ", v.rz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REALSENSE2_CAMERA_MESSAGE_POSE_H
